import numpy as np
import requests
import time
from datetime import datetime, timedelta

CHANNEL_ID = "channelid"
WRITE_API_KEY = "writeapikey"

# Your real data as a string (would normally come from a file)
real_data = """time_stamp,temp,humidity,pressure,rain,
2025-07-01T07:30:00Z,24,83,1007,1,,
2025-07-01T08:00:00Z,24,83,1008,1,,
2025-07-01T08:30:00Z,24,83,1008,1,,
2025-07-01T09:00:00Z,24,83,1008,1,,
2025-07-01T10:00:00Z,26,79,1008,0,,
2025-07-01T10:30:00Z,26,74,1008,0,,
2025-07-01T11:00:00Z,26,74,1008,0,,
2025-07-01T12:00:00Z,27,70,1008,0,,
2025-07-01T12:30:00Z,27,70,1007,0,,
2025-07-01T13:00:00Z,27,74,1007,0,,
2025-07-01T13:30:00Z,26,79,1007,1,,
2025-07-01T14:00:00Z,26,79,1007,1,,
2025-07-01T14:30:00Z,26,79,1007,1,,
2025-07-01T15:30:00Z,27,74,1006,1,,
2025-07-01T16:00:00Z,28,66,1005,1,,
2025-07-01T16:30:00Z,28,66,1005,1,,
2025-07-01T17:00:00Z,28,66,1005,1,,
2025-07-01T17:30:00Z,28,66,1005,1,,
2025-07-01T18:00:00Z,28,66,1005,1,,
2025-07-01T18:30:00Z,27,70,1005,1,,
2025-07-01T19:00:00Z,26,79,1006,1,,
2025-07-01T19:30:00Z,23,89,1007,1,,
2025-07-01T20:00:00Z,23,89,1007,1,,
2025-07-01T20:30:00Z,23,89,1008,1,,
2025-07-01T21:00:00Z,23,89,1008,1,,
2025-07-01T21:30:00Z,23,89,1008,1,,
2025-07-01T22:00:00Z,23,89,1008,1,,
2025-06-30T07:00:00Z,25,74,1007,0,,
2025-06-30T07:30:00Z,25,74,1008,0,,
2025-06-30T08:00:00Z,25,74,1008,0,,
2025-06-30T08:30:00Z,25,74,1008,0,,
2025-06-30T09:00:00Z,26,70,1009,0,,
2025-06-30T09:30:00Z,26,70,1009,0,,
2025-06-30T10:00:00Z,26,74,1008,0,,
2025-06-30T10:30:00Z,27,66,1008,0,,
2025-06-30T11:00:00Z,28,62,1008,0,,
2025-06-30T11:30:00Z,28,62,1008,0,,
2025-06-30T12:00:00Z,28,62,1007,0,,
2025-06-30T12:30:00Z,29,62,1007,0,,
2025-06-30T13:30:00Z,29,58,1007,0,,
2025-06-30T14:00:00Z,30,55,1006,0,,
2025-06-30T14:30:00Z,30,59,1006,0,,
2025-06-30T16:00:00Z,28,66,1005,1,,
2025-06-30T16:30:00Z,27,74,1005,1,,
2025-06-30T17:30:00Z,28,66,1005,1,,
2025-06-30T18:00:00Z,28,66,1005,1,,
2025-06-30T18:30:00Z,27,70,1005,1,,
2025-06-30T19:00:00Z,27,70,1006,1,,
2025-06-30T19:30:00Z,23,94,1007,1,,
2025-06-30T20:00:00Z,23,94,1008,1,,
2025-06-30T20:30:00Z,23,94,1008,1,,
2025-06-30T21:00:00Z,23,94,1008,1,,
2025-06-30T21:30:00Z,23,89,1009,1,,
2025-06-29T08:00:00Z,26,70,1008,0,,
2025-06-29T08:30:00Z,26,70,1008,0,,
2025-06-29T09:00:00Z,27,66,1008,0,,
2025-06-29T09:30:00Z,27,66,1008,0,,
2025-06-29T10:00:00Z,28,62,1008,0,,
2025-06-29T10:30:00Z,29,58,1008,0,,
2025-06-29T11:00:00Z,30,55,1008,0,,
2025-06-29T11:30:00Z,31,49,1007,0,,
2025-06-29T12:00:00Z,31,49,1007,0,,
2025-06-29T12:30:00Z,31,49,1007,0,,
2025-06-29T13:30:00Z,32,46,1006,0,,
2025-06-29T14:30:00Z,32,43,1005,1,,
2025-06-29T15:00:00Z,31,52,1005,1,,
2025-06-29T15:30:00Z,31,49,1005,1,,
2025-06-29T16:00:00Z,31,49,1005,1,,
2025-06-29T16:30:00Z,30,52,1005,1,,
2025-06-29T17:00:00Z,30,52,1005,1,,
2025-06-29T17:30:00Z,28,62,1005,1,,
2025-06-29T18:00:00Z,27,66,1006,1,,
2025-06-29T18:30:00Z,26,65,1006,1,,
2025-06-29T19:00:00Z,26,65,1007,1,,
2025-06-29T19:30:00Z,27,66,1007,1,,
2025-06-29T20:00:00Z,26,70,1008,1,,
2025-06-29T21:00:00Z,24,78,1008,0,,
2025-06-29T21:30:00Z,24,83,1008,1,,
2025-06-29T22:00:00Z,24,83,1009,1,,
2025-06-29T22:30:00Z,25,79,1009,1,,
2025-06-29T23:00:00Z,25,79,1009,1,,
2025-06-29T23:30:00Z,25,74,1008,0,,
2025-06-28T07:30:00Z,25,74,1009,0,,
2025-06-28T08:00:00Z,26,70,1009,0,,
2025-06-28T08:30:00Z,27,70,1009,0,,
2025-06-28T09:00:00Z,27,66,1009,0,,
2025-06-28T09:30:00Z,28,62,1009,0,,
2025-06-28T10:00:00Z,29,58,1008,0,,
2025-06-28T10:30:00Z,29,58,1009,0,,
2025-06-28T11:00:00Z,29,58,1008,0,,
2025-06-28T11:30:00Z,30,55,1008,0,,
2025-06-28T12:00:00Z,31,52,1008,0,,
2025-06-28T12:30:00Z,32,49,1008,0,,
2025-06-28T13:00:00Z,32,49,1008,0,,
2025-06-28T13:30:00Z,32,49,1007,0,,
2025-06-28T14:00:00Z,33,44,1007,0,,
2025-06-28T14:30:00Z,34,41,1006,0,,
2025-06-28T15:00:00Z,33,44,1006,0,,
2025-06-28T15:30:00Z,33,41,1006,0,,
2025-06-28T16:00:00Z,34,41,1005,1,,
2025-06-28T16:30:00Z,33,41,1005,1,,
2025-06-28T17:00:00Z,33,41,1005,1,,
2025-06-28T17:30:00Z,32,46,1005,1,,
2025-06-28T18:00:00Z,32,43,1005,1,,
2025-06-28T18:30:00Z,32,46,1006,1,,
2025-06-28T19:00:00Z,29,62,1006,1,,
2025-06-28T19:30:00Z,29,58,1006,0,,
2025-06-28T20:00:00Z,30,55,1007,0,,
2025-06-28T20:30:00Z,30,55,1007,0,,
2025-06-28T21:00:00Z,30,55,1008,0,,
2025-06-28T21:30:00Z,29,55,1008,0,,
2025-06-27T07:00:00Z,25,74,1008,0,,
2025-06-27T07:30:00Z,25,74,1008,0,,
2025-06-27T08:00:00Z,25,74,1008,0,,
2025-06-27T08:30:00Z,26,70,1008,0,,
2025-06-27T09:00:00Z,26,70,1009,0,,
2025-06-27T09:30:00Z,27,66,1008,0,,
2025-06-27T10:00:00Z,28,62,1008,0,,
2025-06-27T10:30:00Z,29,58,1008,0,,
2025-06-27T11:00:00Z,30,55,1008,0,,
2025-06-27T11:30:00Z,31,52,1008,0,,
2025-06-27T12:00:00Z,32,49,1008,0,,
2025-06-27T12:30:00Z,32,49,1008,0,,
2025-06-27T13:00:00Z,31,52,1008,0,,
2025-06-27T13:30:00Z,32,52,1007,0,,
2025-06-27T14:30:00Z,33,46,1006,0,,
2025-06-27T15:00:00Z,33,46,1006,0,,
2025-06-27T15:30:00Z,33,44,1006,0,,
2025-06-27T16:00:00Z,33,44,1005,1,,
2025-06-27T16:30:00Z,33,44,1005,1,,
2025-06-27T17:00:00Z,32,49,1005,1,,
2025-06-27T17:30:00Z,31,52,1005,1,,
2025-06-27T18:00:00Z,25,74,1006,1,,
2025-06-27T18:30:00Z,25,79,1007,1,,
2025-06-27T19:00:00Z,24,89,1006,1,,
2025-06-27T20:00:00Z,27,66,1007,0,,
2025-06-27T20:30:00Z,28,66,1007,0,,
2025-06-27T21:00:00Z,28,66,1008,0,,
2025-06-27T21:30:00Z,28,66,1008,0,,
2025-06-26T08:00:00Z,26,74,1006,1,,
2025-06-26T08:30:00Z,27,70,1007,1,,
2025-06-26T09:00:00Z,27,70,1007,1,,
2025-06-26T09:30:00Z,27,70,1007,1,,
2025-06-26T10:00:00Z,28,66,1007,1,,
2025-06-26T10:30:00Z,29,62,1007,1,,
2025-06-26T11:30:00Z,29,62,1007,1,,
2025-06-26T12:00:00Z,28,66,1006,1,,
2025-06-26T13:00:00Z,29,62,1006,1,,
2025-06-26T13:30:00Z,29,62,1006,1,,
2025-06-26T14:00:00Z,29,58,1006,1,,
2025-06-26T14:30:00Z,29,62,1006,1,,
2025-06-26T15:00:00Z,30,59,1005,1,,
2025-06-26T15:30:00Z,31,55,1005,1,,
2025-06-26T16:00:00Z,31,52,1004,1,,
2025-06-26T16:30:00Z,31,52,1004,1,,
2025-06-26T17:00:00Z,31,52,1004,1,,
2025-06-26T17:30:00Z,30,55,1004,1,,
2025-06-26T18:00:00Z,30,55,1004,1,,
2025-06-26T18:30:00Z,30,55,1004,1,,
2025-06-26T19:00:00Z,29,58,1005,1,,
2025-06-26T19:30:00Z,29,58,1005,1,,
2025-06-26T20:00:00Z,29,58,1006,1,,
2025-06-26T20:30:00Z,29,58,1006,1,,
2025-06-26T21:00:00Z,28,62,1006,1,,
2025-06-26T21:30:00Z,28,62,1007,1,,
2025-06-26T22:00:00Z,28,62,1007,1,,
2025-06-26T00:00:00Z,25,79,1006,1,,
2025-06-25T07:00:00Z,25,79,1006,1,,
2025-06-25T07:30:00Z,25,79,1006,1,,
2025-06-25T08:00:00Z,26,74,1007,1,,
2025-06-25T08:30:00Z,26,74,1007,1,,
2025-06-25T09:30:00Z,27,70,1007,1,,
2025-06-25T10:00:00Z,28,66,1007,1,,
2025-06-25T10:30:00Z,29,62,1007,1,,
2025-06-25T11:00:00Z,30,59,1006,1,,
2025-06-25T11:30:00Z,30,59,1006,1,,
2025-06-25T12:00:00Z,30,59,1006,1,,
2025-06-25T12:30:00Z,31,55,1006,1,,
2025-06-25T13:00:00Z,30,59,1005,1,,
2025-06-25T13:30:00Z,31,55,1005,1,,
2025-06-25T14:00:00Z,32,52,1004,1,,
2025-06-25T15:00:00Z,31,52,1003,1,,
2025-06-25T15:30:00Z,31,49,1003,1,,
2025-06-25T16:00:00Z,31,52,1003,1,,
2025-06-25T16:30:00Z,30,59,1003,1,,
2025-06-25T17:00:00Z,29,58,1003,1,,
2025-06-25T17:30:00Z,29,62,1003,1,,
2025-06-25T18:00:00Z,29,62,1003,1,,
2025-06-25T18:30:00Z,28,66,1004,1,,
2025-06-25T19:00:00Z,26,79,1004,1,,
2025-06-25T19:30:00Z,27,70,1004,1,,
2025-06-25T20:30:00Z,27,70,1006,1,,
2025-06-25T21:00:00Z,27,74,1006,1,,
2025-06-25T21:30:00Z,27,70,1006,1,,"""  # (your full data here)

def parse_real_data(data_str):
    """Parse the CSV data into a list of dictionaries"""
    lines = data_str.strip().split('\n')
    headers = [h.strip() for h in lines[0].split(',') if h.strip()]
    data = []
    
    for line in lines[1:]:
        if not line.strip():
            continue
        parts = [p.strip() for p in line.split(',')]
        if len(parts) < 5:  # Skip incomplete lines
            continue
            
        entry = {
            'timestamp': parts[0],
            'temp': float(parts[1]),
            'humidity': float(parts[2]),
            'pressure': float(parts[3]),
            'rain': float(parts[4])
        }
        data.append(entry)
    
    return data

def upload_to_thingspeak_with_timestamp(temp, humidity, pressure, rain, timestamp):
    """Upload data with a specific timestamp"""
    url = f"https://api.thingspeak.com/update"
    params = {
        "api_key": WRITE_API_KEY,
        "field1": temp,
        "field2": humidity,
        "field3": pressure,
        "field4": rain,
        "created_at": timestamp
    }
    response = requests.get(url, params=params)
    return response.status_code == 200

def upload_historical_data(data):
    """Upload historical data respecting rate limits"""
    for i, entry in enumerate(data):
        success = upload_to_thingspeak_with_timestamp(
            entry['temp'],
            entry['humidity'],
            entry['pressure'],
            entry['rain'],
            entry['timestamp']
        )
        
        print(f"Entry {i+1}/{len(data)} ({entry['timestamp']}): {'Success' if success else 'Failed'}")
        
        # Respect ThingSpeak's rate limit (15 seconds between updates)
        # But since we're using timestamps, we can go faster for historical data
        time.sleep(1)  # Conservative delay to avoid being blocked

# Main execution
if __name__ == "__main__":
    # Parse the real data
    weather_data = parse_real_data(real_data)
    
    # Sort by timestamp (just in case)
    weather_data.sort(key=lambda x: x['timestamp'])
    
    # Upload the data
    upload_historical_data(weather_data)
    
    print("All data uploaded!")
